{"version":3,"file":"/Users/andres/Library/Mobile Documents/com~apple~CloudDocs/ULL/ASIGNATURAS/PRACTICAS/DSI2021/prct08-filesystem-notes-app/src/note.ts","sources":["/Users/andres/Library/Mobile Documents/com~apple~CloudDocs/ULL/ASIGNATURAS/PRACTICAS/DSI2021/prct08-filesystem-notes-app/src/note.ts"],"names":[],"mappings":";;;AAAA,+BAA+B;AAC/B,yBAAyB;AAGzB,MAAa,IAAI;IAIb,YAAY,IAAY;QACpB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IAED,OAAO;QACH,OAAO,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAED;;;;;;;;;KASC;IAED,OAAO,CAAC,KAAa,EAAE,IAAY,EAAE,KAAa;QAE9C,IAAI,IAAI,GAAW,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;QAEvC,IAAI,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;YACrB,IAAI,EAAE,CAAC,UAAU,CAAC,IAAI,GAAG,GAAG,GAAG,KAAK,GAAG,OAAO,CAAC;gBAC3C,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC,CAAC;iBACnE;gBACD,IAAI,OAAO,GAAG,EAAC,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAC,CAAC;gBAC7D,IAAI,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;gBAC1C,EAAE,CAAC,aAAa,CAAC,IAAI,GAAG,GAAG,GAAG,KAAK,GAAG,OAAO,EAAE,WAAW,CAAC,CAAA;gBAC3D,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC,CAAC;aAC1D;SACJ;aACI;YACD,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACnB,IAAI,OAAO,GAAG,EAAC,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAC,CAAC;YAC7D,IAAI,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YAC1C,EAAE,CAAC,aAAa,CAAC,IAAI,GAAG,GAAG,GAAG,KAAK,GAAG,OAAO,EAAE,WAAW,CAAC,CAAA;YAC3D,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC,CAAC;SAC1D;IACL,CAAC;IAID;;;;;;;;KAQC;IACD,UAAU,CAAC,KAAa,EAAE,IAAY,EAAE,KAAa;QAEjD,IAAI,IAAI,GAAW,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;QAEvC,IAAI,EAAE,CAAC,UAAU,CAAC,IAAI,GAAG,GAAG,GAAG,KAAK,GAAG,OAAO,CAAC,EAAE;YAC7C,EAAE,CAAC,MAAM,CAAC,IAAI,GAAG,GAAG,GAAG,KAAK,GAAG,OAAO,CAAC,CAAC;YACxC,IAAI,OAAO,GAAG,EAAC,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAC,CAAC;YAC7D,IAAI,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YAC1C,EAAE,CAAC,aAAa,CAAC,IAAI,GAAG,GAAG,GAAG,KAAK,GAAG,OAAO,EAAE,WAAW,CAAC,CAAA;YAC3D,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC,CAAC;SAC7D;aACI;YACD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC,CAAC;SACvE;IACL,CAAC;IAID;;;;;KAKC;IAED,UAAU,CAAC,KAAa;QAEpB,IAAI,IAAI,GAAW,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;QAEvC,IAAI,EAAE,CAAC,UAAU,CAAC,IAAI,GAAG,GAAG,GAAG,KAAK,GAAG,OAAO,CAAC,EAAE;YAC7C,EAAE,CAAC,MAAM,CAAC,IAAI,GAAG,GAAG,GAAG,KAAK,GAAG,OAAO,CAAC,CAAC;YACxC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC,CAAC;SAC5D;aACI;YACD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC,CAAC;SACvE;IACL,CAAC;IAID;;;;KAIC;IAED,SAAS;QAEL,IAAI,IAAI,GAAW,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;QAEvC,IAAI,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;YACnC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAC,CAAC;SACpE;aACI;YACD,IAAI,KAAK,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACjC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBACjB,IAAI,YAAY,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,EAAE,OAAO,CAAC,CAAC;gBAC/D,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;gBACxC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACrE,CAAC,CAAC,CAAC;SACN;IACL,CAAC;IAED;;;;;;KAMC;IAED,QAAQ,CAAC,KAAa;QAElB,IAAI,IAAI,GAAW,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;QAEvC,IAAI,EAAE,CAAC,UAAU,CAAC,IAAI,GAAG,GAAG,GAAG,KAAK,GAAG,OAAO,CAAC,EAAE;YAC7C,IAAI,YAAY,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,GAAG,GAAG,GAAG,KAAK,GAAG,OAAO,EAAE,OAAO,CAAC,CAAC;YAC1E,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YACxC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;SACnE;aACI;YACD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC,CAAC;SACvE;IACL,CAAC;CACJ;AA7ID,oBA6IC","sourcesContent":["import * as chalk from 'chalk';\nimport * as fs from 'fs';\n\n\nexport class Note {\n\n    private user: string;\n\n    constructor(user: string) {\n        this.user = user;\n    }\n\n    getUser() {\n        return this.user;\n    }\n\n    /**\n   * Método addNote, crea una nueva nota en el directorio del usuario @param user\n   * o crea el directorio si no existe. Cada nota se almacena en un fichero JSON\n   * separado. \n   * @param title Título de la nota a crear\n   * @param body Cuerpo de la nota a crear\n   * @param color Color de la nota a crear\n   * La función @returns un mensaje de éxito o error según haya podido crear la nota, \n   * o esta ya exista.\n   */\n\n    addNote(title: string, body: string, color: string) {\n        \n        let path: string = 'user/' + this.user;\n        \n        if (fs.existsSync(path)) {\n            if (fs.existsSync(path + \"/\" + title + '.json'))\n                console.log(chalk.red(\"ERROR - Ya existe una nota con ese nombre\"));\n            else {\n                let newNote = {\"title\": title, \"body\": body, \"color\": color};\n                let newNoteJSON = JSON.stringify(newNote);\n                fs.writeFileSync(path + \"/\" + title + '.json', newNoteJSON)\n                console.log(chalk.green(\"Nota añadida correctamente\"));\n            }\n        }\n        else {\n            fs.mkdirSync(path);\n            let newNote = {\"title\": title, \"body\": body, \"color\": color};\n            let newNoteJSON = JSON.stringify(newNote);\n            fs.writeFileSync(path + \"/\" + title + '.json', newNoteJSON)\n            console.log(chalk.green(\"Nota añadida correctamente\"));\n        }\n    }\n        \n        \n\n    /**\n   * Método modifyNote, modifica una nota ya creada. Permite cambiar el cuerpo de la \n   * nota y el color.\n   * @param title Título de la nota que se modifica\n   * @param body Cuerpo de la nota que se modifica\n   * @param color Color de la nota que se modifica\n   * La función @returns un mensaje de éxito o error según haya podido modificar la nota, \n   * o esta no exista.\n   */\n    modifyNote(title: string, body: string, color: string) {\n\n        let path: string = 'user/' + this.user;\n        \n        if (fs.existsSync(path + \"/\" + title + '.json')) {\n            fs.rmSync(path + \"/\" + title + '.json');\n            let modNote = {\"title\": title, \"body\": body, \"color\": color};\n            let modNoteJSON = JSON.stringify(modNote);\n            fs.writeFileSync(path + \"/\" + title + '.json', modNoteJSON)\n            console.log(chalk.green(\"Nota modificada correctamente\"));\n        }\n        else {\n            console.log(chalk.red(\"ERROR - No existe una nota con ese nombre\"));\n        }\n    }\n\n\n\n    /**\n   * Método removeNote, elimina una nota ya creada. Para ello comprueba que la nota existe.\n   * @param title Título de la nota que se elimina\n   * La función @returns un mensaje de éxito o error según haya podido eliminar la nota o\n   * esta no exista.\n   */\n\n    removeNote(title: string) {\n\n        let path: string = 'user/' + this.user;\n        \n        if (fs.existsSync(path + \"/\" + title + '.json')) {\n            fs.rmSync(path + \"/\" + title + '.json');\n            console.log(chalk.green(\"Nota eliminada correctamente\"));\n        }\n        else {\n            console.log(chalk.red(\"ERROR - No existe una nota con ese nombre\"));\n        }\n    }\n\n\n\n    /**\n   * Método listNote, elimina una nota ya creada. Para ello comprueba que la nota existe.\n   * La función @returns una lista de los títulos de las notas en su color correspondiente \n   * o un mensaje de error si no existen notas.\n   */\n\n    listNotes(){\n\n        let path: string = 'user/' + this.user;\n        \n        if (fs.readdirSync(path).length === 0) {\n            console.log(chalk.red(\"ERROR - El usuario no dispone de notas\"));\n        }\n        else {\n            let notes = fs.readdirSync(path);\n            notes.forEach(note => {\n                let readNoteJSON = fs.readFileSync(path + \"/\" + note, \"utf-8\");\n                let readNote = JSON.parse(readNoteJSON);\n                console.log(chalk.keyword(readNote[\"color\"])(readNote[\"title\"]));\n            });\n        }\n    }\n\n    /**\n   * Método readNote, lee una nota del usuario y la muestra por pantalla. Para ello \n   * comprueba que la nota existe.\n   * @param title título de la nota a mostrar\n   * La función @returns el cuerpo de la nota en su color correspondiente\n   * o un mensaje de error si no existe la nota.\n   */\n\n    readNote(title: string){\n\n        let path: string = 'user/' + this.user;\n        \n        if (fs.existsSync(path + \"/\" + title + '.json')) {\n            let readNoteJSON = fs.readFileSync(path + \"/\" + title + '.json', \"utf-8\");\n            let readNote = JSON.parse(readNoteJSON);\n            console.log(chalk.keyword(readNote[\"color\"])(readNote[\"body\"]));\n        }\n        else {\n            console.log(chalk.red(\"ERROR - No existe una nota con ese nombre\"));\n        }\n    }\n}"]}